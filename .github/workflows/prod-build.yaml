name: Production Docker build

on:
  push:
    tags:
      - v*.*.*

jobs:
  jconf-prod:
    name: Build the code for production
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: jconfmex-staging
      GKE_ZONE: us-west2-a
      DEPLOYMENT_NAME: jconfmex-staging-service
      IMAGE: jconfmex-web-staging
      VUE_APP_FIREBASE_API: ${{ secrets.PROD_FIREBASE_API }}
      VUE_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.PROD_FIREBASE_AUTH_DOMAIN }}
      VUE_APP_FIREBASE_DB_URL: ${{ secrets.PROD_FIREBASE_DB_URL }}
      VUE_APP_FIREBASE_PROJECT: ${{ secrets.PROD_FIREBASE_PROJECT }}
      VUE_APP_FIREBASE_STORAGE: ${{ secrets.PROD_FIREBASE_STORAGE }}
      VUE_APP_FIREBASE_MSG_SENDER: ${{ secrets.PROD_FIREBASE_MSG_SENDER }}
      VUE_APP_FIREBASE_APP: ${{ secrets.PROD_FIREBASE_APP }}
      VUE_APP_FIREBASE_MEASUREMENT: ${{ secrets.PROD_FIREBASE_MEASUREMENT }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Get dependencies cached
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Build the project for production
        env:
          NODE_ENV: production
        run: npm run build

      #- name: Build Docker Image
      #  run:
      #    docker build -t jconf-prod:v0.1.0 .

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      # Build the Docker image
      - name: Daaaamn
        run: echo "gcr.io/${{ PROJECT_ID }}/${{ IMAGE }}:${{ GITHUB_SHA }}"

      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "us.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide

